%{
/*
 * Exercise 1, question 1 - Flex file.
 *
 * This file generated by the Flex text processor.
 *
 * Author: Nir Moshe.
 * Date: 26 - October - 2018
 */

#include <stdlib.h>

#define NEWLINE (300)
#define SINGLE_DIGIT (301)
#define MULTIPLE_DIGIT (302)
#define NORMAL_CHAR (303)

char* single_digit_substitutions[] = {
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine"
};

/* Global variable which increased by one every new line. */
unsigned int lines_counter = 1;

%}

%%
[0-9]{2,}  { return MULTIPLE_DIGIT; }
[0-9]      { return SINGLE_DIGIT; }
\n         { return NEWLINE; }
.          { return NORMAL_CHAR; }
%%

void handle_newline()
{
    lines_counter++;
    if (lines_counter % 2 == 0)
        fprintf(stdout, "\n%d. ", lines_counter);
    else
        fprintf(stdout, "\n");
}

void handle_single_digit()
{
    /* Now yytext is a single digit wrapped with to other characters! need to restore them. */
    int current_digit = atoi(&yytext[0]);
    fprintf(stdout, "%s", single_digit_substitutions[current_digit]);
}

int main (int argc, char **argv)
{
   int token;

   /* By default, if there is no command line argument, we use the stdin. */
   if (argc != 2)
      yyin = stdin;
   else
      yyin = fopen(argv[1], "r");

   while ((token = yylex()) != 0)
   {
        switch(token) {
            case SINGLE_DIGIT:
                handle_single_digit();
                break;
            case NEWLINE:
                handle_newline();
                break;
            case MULTIPLE_DIGIT:
            case NORMAL_CHAR:
                fprintf(stdout, "%s", yytext);
                break;
        }
   }

   fclose(yyin);
   return 0;
}